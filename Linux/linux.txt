In linux 
To practice - (install git or MobaXterm)

Create a linux machine in AWS cloud 

1. Create a AWS account 
2. wait for the account to get activated 
3. Search for EC2 service -> Goto Instances -> Launch Instances 
	a. Give a name to the machine (instance)
	b. Choose the OS type (AMI type)
	c. Create and save the Key Pair to login 
4. Create instance 

In linux command are casesensitive 

folder is called as Directory 

Know your current path/location 
    pwd - present working directory 

To list files and directories 
     command: ls 
     To list with details (long format): ls -l
     To list with creation time sorted (recent at top): ls -t
     To list reverse order: ls -r
     All the above together: ls -lrt (OR) ll
       
switch/change to a folder/Directory in linux (change directory - cd)
    command: cd  
    Syntax: cd <path>/<location>
    example: 1. To change to a Directory in current location
    		cd test 

create a directory/folder in linux (make directory - mkdir)
    command: mkdir 
    To create a directory: mkdir <directory_name>
    		example: mkdir test
    To create multiple directories: mkdir <directory_name> <directory_name1> <directory_name2> ..... <directory_name>
    		note: directory names with space seperated	
    		example: mkdir test test1 test2 ....		
    
rename or move the file from one location to another (mv)
	- mv command to move files and directory through the command line. 
	- We can also use the mv command to rename a file/directory.
	To rename a file/directory
		mv old_filename new_filename
		mv old_directory new_directory
	To move to a different location (cut and paste)	
		mv <source> <destination>
	
	
Delete files/directories (rm)

Use the rm command to delete files and directories. But rm cannot simply delete a directory. Use “rm -r” to delete a directory. In this case, it deletes both the folder and the files in it.
     To remove/delete a file 	
	rm file_name 
     To remove/delete a Directory	
	rm -r directory

Linux path 
  Always linux path is seperate with / 	
   . -> current directory 
   .. -> one step back / Previous one directory 
   ../.. -> Previous two directory

To create a empty file (touch)
    if file does not exists, touch command will creates empty file.
    If file already exists, touch command will alter the file timestamp to recent.
	touch <file_name>
To display/print tje contents of files (cat)
	cat command (short for “concatenate“) allows us to create single or multiple files, view contain
	of file, concatenate files and redirect output in terminal or files.
		cat <file_name>


To install tree command execute the below 2 command seperately 
    1. sudo apt update
    2. sudo apt install tree 


Vi Editor 

	Command Mode  
		- we can't add any content. This is used to run vi related commands. 
		- Initialy when we do vi to a file command mode is the default mode.
	
		Only Save the changes to the file -  ':w'
		To quit from vi - ':q!'
		Save and quit from vi - ':wq!' or (<escape> - Hold shift + zz)
		Save to another file - ':w <new_file>'

		To search a word - '/<word>'

		To display line numbers - ':set nu'

		To replace word - s/<old_word>/<new_word>/g

		To display line numbers - ':nu'

		dd - cut the entire line where the cursor is 
		yy - copy the entire line where the cursor is 
		p - paste the clip-borad content next to the cursor 

	
	Insert Mode 
		- Is used add the content to the file.
 		- Press 'i' to enter to insert mode 
 		- Press '<escape>' to exit insert mode and move to command mode.


chmod 
   (Chart I added as image in the same repo)
   - chmod command is used to change the access mode of a file. 
   - The name is an abbreviation of change mode. 

   example: 1. Read, write and execute permissions to the file owner: 
   			chmod u+rwx <file_name>	
				(OR)
			chmod 700 <file_name>		
	    2. Read, write to file owner, Read to groups and Wrtie, Execute to Others: 
   			chmod u+rw, g+r, o+wx <file_name>	
				(OR)
			chmod 643 <file_name>

tail 
tail -n n file.txt The tail command, as the name implies, print the last N number of lines
of the given input. By default, it prints the first 10 lines of the specified files.
	# Prints last 5 line of file.txt
		tail -n 5 file.txt (or) tail -5 file.txt 

find
	find command can be used to find files and directories and perform subsequent operations on them. It supports searching by file, folder, name, creation date, modification date, owner and permissions. By using the ‘-exec’ other commands can be executed on files or folders found.
	
SYNTAX: find <location_to_find> [options]

1) Searcha file with specific name -> 
	find . -name file.txt
3) Searcha file with specific name with ignorecase -> 
	find . -iname file.txt
2) searcha files in multiple directories -> 
	find . /home /user -name file.txt
4) Search only files containing name -> 
	find . -type f -iname file.txt
5) Search only directories containing name -> 
	find . -type d -iname file.txt
6) Search for empty files and directories -> 
	find . -empty
7) Search for file with permissions(655) -> 
	find . -perm 655
8) Search text within multiple files. 
	find./-typef-name"*.txt"-execgrep'search_string' {}\;
9) find files by last modification time -> 
	find . -mtime days
	# 24 hours -> find . -mtime 1
	# modified less than 7 days (7 days to till) -> find . -mtime -7
	# Last 50-100 Days Modified Files -> find . -mtime +50 –mtime -100 
10) Find Last 50 Days Accessed Files -> find . -atime 50
11) Find Changed Files in Last 1 Hour -> find / -mmin -60
12) Find Accessed Files in Last 1 Hour -> find / -amin -60

grep
‘global search for the regular expression’: The grep command is a filter that is used to search for lines
matching a specified pattern and print the matching lines to standard output.

1) Match all lines that start with‘hello’.E.g:“hellothere” -> 
	grep “^hello” file1
2) Match all lines that end with‘done’.E.g:“welldone” -> 
	grep “done$” file1
3) Match all lines that contain any of the letters‘a’,‘b’,‘c’,‘d’or‘e’ -> 
	grep “[a-e]” file1
4) Match all lines that do not contain a vowel -> 
	grep “[^aeiou]” file1
5) Match all lines that start with a digit following zero or more spaces. E.g:“1.”or“2.” -> 
	grep “ *[0-9]” file1
6) Searching in all files recursively using -> 
	grep-r grep -r "ramesh" *
7) Search multiple patterns -> 
	grep -v -e "pattern" -e "pattern"
	
sed
SED command in UNIX is stands for stream editor and it can perform lots of function on file like, searching, find and replace, insertion or deletion. 

Consider the following text file as the input file for all cases below. (file.txt)

unix is great os. unix is opensource. unix is free os.
learn operating system.
unix linux which one you choose.
unix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.

1) Replacing or substituting string 
	sed 's/unix/linux/' file.txt
2) Replacing the nth occurrence of a pattern in a line 
	sed 's/unix/linux/2' file.txt
3) Replacing all the occurrence of the pattern in a line 
	sed 's/unix/linux/g' file.txt
4) Replacing from nth occurrence to all occurrences in a line 
	sed 's/unix/linux/3g' file.txt
5) Replacing string on a specific line number 
	sed '3 s/unix/linux/' file.txt
6) Printing only the replaced lines 
	sed -n 's/unix/linux/p' file.txt
7) Deleting lines from a particular file
	To Delete a particular line, say 5 in this example
		sed '5d' file.txt
 	To Delete a last line
		sed '$d' file.txt
	To Delete line from range x to y
		sed '3,6d' file.txt
	To Delete from nth to last line
		sed '12,$d' file.txt
	To Delete pattern matching line
		sed '/pattern/d' file.txt
8) Print specific line from a file 
	sed -n '2p' file.txt

CUT
The cut command in UNIX is a command for cutting out the sections column with using delimiter from each line of files and writing the result to standard output.
	cut -d "delimiter" -f (field number) file.txt
1) To cut the data with “ “ (space) as delimiter and print first column data
	cut -d " " -f 1 state.txt
2) To cut the data with “ “ (space) as delimiter and print first to fourth column data
	cut -d " " -f 1-4 state.txt

awk

The awk command in UNIX is a command for cutting out the sections column with using field separator from each line of files and writing the result to standard output.

Consider the following text file as the input file for all cases below.
$cat > employee.txt
ajay manager account 45000 
sunil clerk account 25000 
varun manager sales 50000 
amit manager account 47000

1) Default behavior of Awk: By default Awk prints every line of data from the space separated field of file.
	awk '{print $1}' employee.txt
		    (or)
	awk -f “ “ ‘{print $1}’ employee.txt

2) To print the last column of a file using NF – Number of Fields/Columns
	How to get the last word from a line in file.
		awk  ‘{print $NF}’ employee.txt

date
- date command is used to display the system date and time.
- date command is also used to set date and time of the system. 
- By default the date command displays the date in the time zone on which unix/linux operating system is configured. 
- You must be the super-user (root) to change the date and time.

a) Date and time of 2 years ago.	date --date="2 year ago"	Wed May 26 12:01:31 UTC 2021
b) Date and time of 5 seconds ago.	date --date="5 sec ago"		Fri May 26 12:01:37 UTC 2023
c) Date and time of previous day.	date --date="yesterday"		Thu May 25 12:01:51 UTC 2023
d) Date and time of 2 months ago.	date --date="2 month ago"	Sun Mar 26 12:02:00 UTC 2023
e) Date and time of 10 days ago.	date --date="10 day ago"	Tue May 16 12:02:10 UTC 2023
a) Upcoming particular week day.	date --date="next tue"		Tue May 30 00:00:00 UTC 2023
b) Date and time after two days.	date --date="2 day"		Sun May 28 12:03:03 UTC 2023
c) Date and time of next day.		date --date="tomorrow"		Sat May 27 12:03:11 UTC 2023
d) After 1 year on the current day.	date --date="1 year"		Sun May 26 12:03:20 UTC 2024

Formating 
date "+%D"		05/26/23
date "+%D %T"		05/26/23 05:49:30
date "+%Y-%m-%d"	2023-05-26
date "+%Y/%m/%d"	2023/05/26
date "+%A %B %d %T %y"	Friday May 26 05:49:30 23

basename  
- Returns trailing name component of path
   basename /user/ubuntu/linux/file.txt 
   	output: file.txt
dirname  
- Returns prefixed path of the component
   dirname /user/ubuntu/linux/file.txt 
   	output: /user/ubuntu/linux
	

Crontab (Job Scheduler)
The crontab is a list of commands that you want to run on a regular schedule, and also the name of the command used to manage that list. Crontab stands for “cron table, ” because it uses the job scheduler cron to execute tasks; cron itself is named after “chronos, ” the Greek word for time.cron is the system process which will automatically perform tasks for you according to a set schedule. The schedule is called the crontab, which is also the name of the program used to edit that schedule.

Linux Crontab Format:	*	*	*	*	*	command to execute

		       MIN    HOUR     DOM     MON     DOW	       CMD

FIELD	DESCRIPTION	ALLOWED VALUE
MIN	Minute field	0 to 59
HOUR	Hour field	0 to 23
DOM	Day of Month	1-31
MON	Month field	1-12
DOW	Day Of Week	0-6
CMD	Command	Any command to be executed.

To view the Crontab entries: crontab -l
To edit Crontab Entries: crontab -e
To edit crontab entries of other Linux users: crontab -u username -e

example
1) To schedule a job for every minute using Cron
	* * * * * command/script
2) How to Execute a Linux Cron Jobs Every Second Using Crontab.
	You cannot schedule an every-second cronjob. Because in cron the minimum unit you can specify is minute. 
3) To schedule a background Cron job for every 10 minutes.
	*/10 * * * * /home/maverick/check-disk-space
4) Schedule a Job for More Than One Instance (e.g. Twice a Day)
	executes the specified script at 11:00 and 16:00 on every day
	00 11,16 * * * /home/ramesh/bin/incremental-backup
5) Schedule a Job for Specific Range of Time (e.g. Only on Weekdays)
	This example checks the status of the database everyday (including weekends) during the working hours 9 a.m – 6 p.m
	00 09-18 * * * /home/ramesh/bin/check-db-status
6) Cron job to run on the last day of the month
	55 23 28-31 * * [[ "$(date --date=tomorrow +\%d)" == "01" ]] && myscript.sh 0 23 28-31 * * [ $(date -d +1day +%d) -eq 1 ] && myscript.sh
 
7) Cron special keywords and its meaning
	Keyword	Equivalent
	@yearly	0 0 1 1 *
	@daily	0 0 * * *
	@hourly	0 * * * *
	@reboot	Run at startup.
	
	a) To schedule a job for first minute of every year using @yearly
		@yearly /home/maverick/bin/annual-maintenance
	b) To schedule a Cron job beginning of every month using @monthly
		@monthly /home/maverick/bin/tape-backup
	c) To schedule a background job every day using @daily
		@daily /home/maverick/bin/cleanup-logs "day started"
	d) To execute a linux command after every reboot using @reboot
		@reboot CMD


free
Free command used to check the used and available space of physical memory and swap memory (ram memory) in KB. The free command displays:
•	Total amount of free and used physical memory
•	Total amount of swap memory in the system
•	Buffers and caches used by the kernel

top
The top command also gives you a real-time update on how much of your swap space is being used.

/proc/meminfo
	cat /proc/meminfo will contain dynamic information about the kernel and the system.
	
du
“du” (Disk Usage) is a standard Unix/Linux command, used to check the information of disk usage of files and directories on a machine.
1) Using “-h” option with “du” command provides results in “Human Readable Format“. Means you can see sizes in Bytes, Kilobytes, Megabytes, Gigabytes etc.
		du -h

df
The command df stands for "disk filesystem". With the -h option (df -h) it shows the disk space in "human readable" form

ps
ps command is used to display information about the processes that are running in the system.
1) To view current running processes.
	ps -ef	
kill
Use kill command to terminate a process. First get the process id using ps -ef command, then use kill -9 to kill the running Linux process as shown below. 
STEP1: Before kill first get the pid (process id to kill)
	ps -ef | grep process_name
	
	OUTPUT:
		user 7243 7222 9 22:43 pts/2 00:00:00 process

STEP2: To kill the above process (use the pid from the second column)
	kill -9 7243
	
	
bg
   - bg sends the specified jobs to the background.
   - Also we can '&' at the end of any command to send it to background 

jobs 
   To list all the process running background 	
   
fg 
     Bring a background process to the foreground
     STE1: jobs
     STEP2: use the array/sequence number of background job to bring to foreground 
     		fg <job_number>

nohup
   - Most of the time your login into remote server via ssh. If you start a shell script or command and you exit (abort remote connection), 	 the process / command will get killed. 
   - Sometime job or command takes a long time. If you are not sure when the job will finish, then it is better to leave job running in 	background. But, if you log out of the system, the job will be stopped and terminated by your shell.
   - use nohup command which allows to run command/process or shell script that can continue running in the background after you log out 	from a shell:
		nohup <command> &

uname	
	uname command displays important information about the system such as — Kernel name, Host name, Kernel release number, Processor type, etc.,

To check the linux version 
	cat /etc/os-release (or) lsb_release -a

whereis	or which 
When you want to find out where a specific Unix command exists (for example, where does ls command exists?), you can execute the following command.

whatis	
Whatis command displays a single line description about a command.

who	
who command is used to find out the following information:
	1. Time of last system boot
	2. Current run level of the system
	3. List of logged in users and more.

	a) To display all details of current logged in user:	who -a
	b) To display current run level of the system:		who -r
	c) To show time of the system when it booted last time:	who -b -H
	d) To show list of users logged in to system:		who -u

whoami	
To display system’s username

root
- Root is the superuser account in Unix and Linux which is created automatically at the time of OS installation.
- The root user has complete and unrestricted access to the system, including the ability to modify or delete any file or directory, and to start or stop any service.
- It is a user account for administrative purposes, and has the highest access rights on the system.
- The default user ID of root user is 0 (Zero)

sudo 
The sudo command lets us run commands with root privileges
	sudo <command>
	
su (switch user)
su command allows us to switch to a different user from current logged in user.
1) To switch the logged-in user to another user 	
	su -l <username>

2) Command to switch to root suer 
	sudo su -l root 
	      (or)	
	sudo su -

echo 
The echo command is a built-in command in most Unix-like operating systems, including Linux and macOS. It is used to display text to the standard output or console or in the terminal.
	echo <text_line to display>
	example: echo "My name is Manoj ......" 

Bash scripting 
Variables 
- A bash variable is a temporary storage location for a value. 
- Variables can be used to store any type of data, including strings, numbers, and lists. 

1) Setting a value for a variable.
	variable_name=value
	
2) Reading the value for a variable.
	For referring to or reading a variable we place a $ sign before the variable name.
		echo "$variable_name"	

#) How to store a command output in a variable 
	1) By using the acute or backtick or left quote (`)
		famously known as backtick
		variable=`<any_command>` 
	2) By using shell executor method 
		variable=$(<any_command>) 
				


Write to a File using the Redirection Operator (>)
	
	- Redirection allows you to capture the output from a command and overwrite it as input to another command or file.
	- It will overwrite/Erase all the content of file and add the new content to file.
	- What ever the content it will written to file and nothing will be printe in console. 

		echo "This is Redirection of text to file" > file.txt

		To write to a file and also to print the written content in console/terminal 
			 echo "This is Redirection of text to file" | Tee file.txt

Append to a File using the double Redirection Operator (>>)
	
	- Double Redirection allows you to capture the output from a command and send it as input to another command or file.
	- It will append the content to the end of file by keeping the old content.

		echo "This is Redirection of text to file" >> file.txt

		To append to a file and also to print the written content in console/terminal 
			 echo "This is Redirection of text to file" | Tee -a file.txt
			 							(OR)
			 echo "This is Redirection of text to file" | Tee --append file.txt

Single quote ('') vs Double quote ("")
	
	var=10

	('') 
		- Consideres all inside single quotes as String 
		- The $var variable output does not get replaced with the variable value, but displays the variable name within the quotes, i.e., its literal form.

		>$  echo '$var'
		output:	$var

	("") 
		- Looks for assigned values to variable and executes the content. 
		- Running the echo command with double quotes expands the $var variable and outputs the assigned value instead of printing the characters within the quotes.

		>$  echo "$var"
		output:	10	

Escape character 

	\ 
		- A non-quoted backslash ‘\’ is the Bash escape character. 
		- It preserves the literal value of the next character that follows and makes it as string only. 

		Below only the charecter $ will be escaped and treated as string 
			>$  echo "\$var"
			output:	$var	

		- If a \n pair appears, and the backslash itself is not quoted, a newline will be addedd. 

			echo -e "\nThis is to add newline before this echo"

			Multiple newlines 
			echo -e "\nThis is \n to add newline \n before this echo\n"


Copy the file from one location to another (cp)
	- cp command copies files and directory through the command line. 

	To copy to a different location
		cp <source> <destination>	


scp (Secure and Normal copy between servers)
- Used copy files and directory between the machines and also we can use it to copy with in the linux machine like cp.
- It uses the same authentication and security configurations as SSH command.
- If the copy process using SCP is interrupted or terminated before completion, running SCP again will start the copy process from the beginning. SCP does not have the ability to resume the transfer or transfer only the remaining parts of the file. It performs a plain linear copy, either locally or over a network.
- Encrypt data by default, Slower for large transfers and more secure.

	1. From Local machine to Remote host/machine
		a. To copy file from local machine (from where we are running scp command to remote linux)
	  		scp <local_normal_path>  <username>@<ip_address>:<remote_file_path>
	  
		b. To copy Directory from local machine (from where we are running scp command to remote linux)
	  		scp -r <local_normal_path>  <username>@<ip_address>:<remote_file_path>  
	2. From Remote host/machine to Local machine.  
		a. To copy file from Remote machine to local
	  		scp <username>@<ip_address>:<remote_file_path> <local_normal_path> 
	  
		b. To copy Directory from local machine (from where we are running scp command to remote linux)
	  		scp -r <username>@<ip_address>:<remote_file_path> <local_normal_path>    
			
	example: 
	  	1. Local to Remote
			FILE: scp -i 'aws.pem' ./test.txt ubuntu@45.86.114.52:/home/ubuntu/test.text
			Directory: scp -r -i 'aws.pem' ./test ubuntu@45.86.114.52:/home/ubuntu/
			
		2. Remote to Local
			FILE: scp -i 'aws.pem' ubuntu@45.86.114.52:/home/ubuntu/test.text ./test.txt 
			Directory: scp -r -i 'aws.pem' ubuntu@45.86.114.52:/home/ubuntu/test . 	
			
rsync (Compare and copy files)
- Used copy files and directory between the machines and also we can use it to copy with in the linux machine like cp and scp.
- rsync performs a more sophisticated comparison between the source and destination files. It checks not only the file sizes but also the modification timestamps and other attributes of the files.
- If the copy process using rsync is interrupted or terminated before completion, running rsync again will start the copy process for remaining file as it compares the source and destinations files, Directories.
- Does not encrypt data by default, Faster for large transfers and less secure compared to scp
			
	FILE: rsync -e 'ssh -i aws.pem' <local_normal_path>  <username>@<ip_address>:<remote_file_path>
	Directory: rsync -r -e 'ssh -i aws.pem' <local_normal_path>  <username>@<ip_address>:<remote_file_path>
		
Environment variables
- Environment variables are named values stored in the operating system's environment
- Its preffered to use the Uppercase for Environment variable name.
- The scope of the Environment variables is OS level. Like they are system-wide or can be a user-specific varibale.

  To list all the Environment variables
  	env
	
  To create a environment variable in Linux 
  	export <VARIABLE_NAME>=<VALUE>
	example: export TEST='any value'
  
  To create a environment variable in Windows (Optional)
  	1. Use use UI to create
	2. Through powershell / cmd
  	set <VARIABLE_NAME>=<VALUE>
	example: set TEST='any value'

Some important environment variable 
1. PATH 
   - The PATH variable specifies the directories where the system looks for executable files/commands. 
   - The directories list are separated by colons (:) 
   - It allows us to run commands without specifying the full path to the executable. 
   - The commands that we try run in terminal it will search in a path from start to end of path list of this variable.
  
   For example: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
   
   To update/add a path to $PATH
   	export PATH="${PATH}:/home/ubuntu"
2. HOME
   - The HOME variable points to the current user's home directory. 
   - In Linux - /home/<username>, where in EC2 (ubuntu) by default '/home/ubuntu'.	
3. SHELL 
   - The SHELL variable specifies the default shell for the user. 
   - It contains the path to the user's default shell executable, such as /bin/bash or /bin/sh.
4. PWD
   - The present working directory path 
5. USER
   - The USER variable stores the <username> of the currently logged-in user.   
6. LANG
   - The LANG variable defines the default language and locale settings for the user interface and applications.   

wc (word count)

It is used to find out number of lines, word count, byte and characters count.
	To count number of lines in a file 
		cat file.txt | wc -l 
	To count number of words in a file 
		cat file.txt | wc -w
	To count number of characters in a file 
		cat file.txt | wc -c	

systemctl
    - systemctl is used to examine and control the state of “systemd” system and service manager. 
    - systemd is a system and service manager for Unix-like operating systems (most of the Linux distributions)
    # TO check the status of service (Active, exited .....) 		
	sudo systemctl status <service_name>	
 
    # TO start the service 
	sudo systemctl start <service_name>	
    
    # TO stop the service 
	sudo systemctl stop <service_name>	
	
    # TO restart the service 
	sudo systemctl restart <service_name>	
	
    # TO disable the service 
	sudo systemctl disable <service_name>	
    
    # TO enable the service 
	sudo systemctl enable <service_name>	
	
    # TO reload the service configuration 
	sudo systemctl reload <service_name>	

    # TO reload systemd manager configuration
	sudo systemctl daemon-reload <service_name>	

lsof 
    - display information about files, ports and processes that are currently open by the system.

    # List all open files: lsof 
    	- display a list of all files that are currently open by any process on the system.
    # List open files for a specific process: lsof -p <pid>
    	- display all files opened by that particular process.
    # List open files for a specific user: lsof -u <username>
    	- display all files opened by processes owned by that user (by <username>).
    # List open files for a specific directory: lsof <directory_path>
    	- display all files opened within that directory or any of its subdirectories.
	
To check the port open or not 
   List all busy ports in linux
       1. sudo lsof -i -P -n | grep LISTEN
       2. sudo netstat -tulpn | grep LISTEN
       
   To check a specific port ope or not  
   	sudo lsof -i:<port_number>
	example: sudo lsof -i:8080
	
curl (connect url)
	curl command is widely used for testing and interacting with various network services, wedsites and APIs. 

Here is a commonly used example of the curl command in the DevOps field:
    1. Make an HTTP GET request and display the response like (html, json):
	 curl <url>
	 where: url: is dns (website address / ip address)
	 
    2. call the url and save the response to a file
	 curl -o <output_file> <url>
    
    3. Make an HTTP POST request with data like (username, password, data to send to api)
	 curl -H 'header: value' <url>

tar
   - tar is used for creating and extracting archive files.
   - tar command can create compressed or uncompressed archive files, as well as maintain and modify them.
	Syntax: 
		tar [options] [archive-file] [file or directory to be archived]
	     [options]
		-c : Creates an archive
		-x : Extracts the archive
		-v : Displays verbose information
		-f : Creates an archive with a specified filename
		-z : Tells the tar command to create a tar file using gzip
		
		More options: 
		-t : Displays or lists files in an archived file
		-u : Archives and adds to an existing archive file
		-A : Concatenates the archive files
		-j : Filters the archive tar file using tbzip
		-W : Verifies an archive file
		-r : Updates or adds a file or directory to an already-existing .tar file.
	example:
	  1.  Create a tar archive with gzip compression. (-c)
		tar -czvf <tar_file_name>.tar.gz <files or folder>	
		ex: tar -czvf jenkins_backup.tar.gz /var/lib/jenkins
	  2.  Extract a gzip compressed tar archive. (-x)
		tar -xzvf <tar_file_name>.tar.gz 	
		ex: tar -xzvf jenkins_backup.tar.gz
zip 
  - The zip command is a popular tool used to compress and archive files. 
  - It is available on most operating systems, including Linux, macOS, and Windows. 
  - The command allows you to create, view, and extract zip archives. 

	The basic syntax for creating a zip archive is as follows:
	    1.  Create a zip archive.
		zip <zip_file_name>.zip <files or folder>
	    2.  To extract the contents of a zip archive.
		unzip archive_name.zip

